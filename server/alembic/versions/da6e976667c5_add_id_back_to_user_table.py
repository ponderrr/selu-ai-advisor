"""Add id back to user table

Revision ID: da6e976667c5
Revises: 1b8320c9acfc
Create Date: 2025-05-31 17:18:42.515972

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'da6e976667c5'
down_revision: Union[str, None] = '1b8320c9acfc'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Step 1: Add the column as nullable
    op.add_column('users', sa.Column('id', sa.Integer(), autoincrement=True, nullable=True))

    # Step 2: Create a sequence and fill existing rows with incremental IDs
    op.execute("""
        CREATE SEQUENCE IF NOT EXISTS users_id_seq;
        UPDATE users SET id = nextval('users_id_seq');
    """)

    # Step 3: Alter to NOT NULL
    op.alter_column('users', 'id', nullable=False)

    # Step 4: Add index and constraints
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_unique_constraint(None, 'users', ['w_number'])



def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'users', type_='unique')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.create_index(op.f('ix_users_w_number'), 'users', ['w_number'], unique=True)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('users', 'id')
    # ### end Alembic commands ###
